The goal of MFlow is to invert back the inversion of control of web applications and turn web programming into ordinary, intuitive, imperative-like, programming as seen by the programmer. But at the same time, maintain for the user all the freedom that he has in web applications. In the other side, for scalability aware people, to avoid the fat state snapshots that continuation based framworks need to cope with these two requirements. For REST advocates, to maintain the elegant notation of REST urls and the statelessness of GET requests. For Expert haskell programmers, to reuse the already existent web libraries and techniques. For beginner progrmmers, to provide with a high level DSL of reusable, self contained widgets for the user interface, and multipage procedures that can work together if they statically typecheck, with zero configuration. For higly interactive applications, to give dinamic widgets that have their own dynamic behaviours in the page, and communicate themselves without the need of explicit  JavasCript programming. 


MFlow try to solve the first requirements using an innovative approach. The routes are expressed as normal, monadic haskell code in the FlowM monad. Local links point to alternative routes within this monadic computation just like a textual menu in a console application. Any GET page is directly reachable by means of a RESTful URL.

At any moment the flow can respond to the back button or to any RESTful path that the user may paste in the navigation bar. If the procedure is waiting for another different page, the FlowM monad backtrack until the path partially match. From this position on, the execution goes forward until the rest of the path match.  Thus, no matter the previous state of the server process, it recover the state of execution appropriate for the request. This way the server process is virtualy stateless for any GET request. However, it is possible to store a session state, which may backtrack or not when the navigation goes back and forth. It is upto the programmer. Syncronization between server state and web browser state is supported out-of-the-box.

When the state matters, and user interactions can last for long, such are shopping carts etc. It uses a log for thread state persistence. The server process shut itself down after a programmer defined timeout. Once a new request of the same user arrive, the log is used to recover the process state. There is no need to store a snapshoot of every continuation, just the result of each step.
  

State consistence and transactions are given by the TCache package. It is data cache within the STM monad (Software Transactional Memory) semantics. serialization and deserialization of data is programmer defined, so it can adapt it to any database, although any other database interface can be used. Default presistence in files comes out of the box for rapid development purposes.

The processes interact trough widgets, that are an extension of formlets with additional applicative combinators
, formatting, link management, callbacks, modifiers, caching and AJAX. All is coded in pure haskell. Each widget return statically typed data. They can dynamically modify themselves using AJAX internally (ust prefix it with autorefresh). They are autocontained: they may include their own javascript code, server code and cliente code in a single pure haskell procedure that can be combined with other widgets with no other configuration.

To combine widgets, it uses Applicative combinators. Dynamic widgets can use the monadic syntax and callbakcks.

The interfaces and communications are abstract, but there are bindings for blaze-html, HSP, Text.XHtml and byteString, Hack and WAI but it can be extended to non Web based architectures.



Bindings for hack, and hsp >= 0.8,  are not compiled by Hackage, and do not appear, but are included in the package files. To use them, add then to the exported modules and execute cabal install


It is designed for applications that can be run with no deployment with runghc in order to speed up the development process. see <http://haskell-web.blogspot.com.es/2013/05/a-web-application-in-tweet.html>

This release (0.3) includes:

 - /RESTful/ URLs 

 - Automatic independent refreshing of widgets via Ajax. (see http://haskell-web.blogspot.com.es/2013/06/and-finally-widget-auto-refreshing.html)

 - Now each widget can be monadic so it can express his own behaviour and can run its own independent page flow. (see <http://haskell-web.blogspot.com.es/2013/06/the-promising-land-of-monadic-formlets.html>)

 - Per-widget callbacks, used in page flows, that change the rendering of the widget (see <http://haskell-web.blogspot.com.es/2013/06/callbacks-in-mflow.html>)

 - Widgets in modal and non modal dialogs  (using the jQuery dialog)

 - Other wrappers for jQuery widgets as MFlow widgets: spinner, datepicker



The version 0.2 added better WAI integration, higher level dynamic Widgets, content management, multilanguage, blaze-html support, stateful ajax for server-side control, user-defined data in sessions and widget requirements for automatic installation of scripts, CSS and server flows.


The version  0.1 added transparent back button management, cached widgets, callbacks, modifiers, heterogeneous formatting, AJAX, and WAI integration.


