<h1><font face="helvetica" style="font-weight: normal; text-align: justify; font-size: xx-large;"><span style="white-space: pre-wrap;"><i><b>New!</b> </i></span></font><img src="http://icons.iconarchive.com/icons/custom-icon-design/pretty-office-11/32/new-icon.png" alt="" align="none" style="font-weight: normal; text-align: justify; font-size: xx-large; font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif;"><br></h1><div><ul><li>Encrypted cookies&nbsp;<span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp;thanks to Aistis Raulinaitis in the&nbsp;</span><a href="https://github.com/agocorona/MFlow" title="" target="" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">github repository</a><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">.</span></li><li>In&nbsp;<a href="/noscript/databasesamples" title="" target="">Database examples</a>&nbsp; there is a new example using&nbsp;<a href="/noscript/databasesamples/acidstate" class="_noAutoRefresh" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;" title="" target="">Acid State</a><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp;that store and retrieve lines of text to/from&nbsp;</span><a href="http://hackage.haskell.org/package/acid-state" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">Acid State</a>. Thanks to Aistis Raulinaitis</li><li><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif; background-color: rgb(255, 255, 255);">In&nbsp;<a href="/noscript/flows" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;" title="" target="">Different kinds of flow</a>s &nbsp;there are two new examples:&nbsp;</span></li><ul><li><span style="background-color: rgb(255, 255, 255);"><a href="http://localhost/noscript/flows/searchcart" class="_noAutoRefresh" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">Shopping with data tier, queries and full text search</a>:<span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp;A shopping example completed with a dynamic catalog stored using TCache</span><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp;</span><i style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;"><a class="_noAutoRefresh" href="http://haskell-web.blogspot.com.es/2013/04/mflow-what-about-data-tier-adding-it-to.html" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">(article)</a></i></span></li><li><a href="/noscript/flows/initialconfig" class="_noAutoRefresh" title="" target="">Initial Configuration in session parameters</a>:&nbsp;the user is asked for some questions initially that never will be asked again unless he likes to change them (stored in session parameters)</li></ul><li><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">A </span><a href="https://www.fpcomplete.com/business/blog/guest-post-solve-integration-problem/" title="" target="" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">post </a><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp;from me&nbsp;</span><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">in the &nbsp;</span><a href="http://www.fpcomplete.com" title="" target="" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">fpcomplete.com</a><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp;blog about MFlow with introduction by Michael Snoyman (@snoyberg). Thanks to the people of FP Complete for their wonderful work in the advance of Haskell in Industry and the resources that they have developed for this purpose.&nbsp;</span><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">In the post + Tutorial I explain how Web applications are a particular case of what I call "the integration problem" that is caused by an inversion of control.</span><br></li><li><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">A new version with </span><i style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">runSecureNavigation </i><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">with &nbsp;SSL and TLS is available thanks to Aistis Raulinaitis in the </span><a href="https://github.com/agocorona/MFlow" title="" target="" style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">github repository</a><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">.</span><br></li></ul></div><h1>10+ things that you can do with MFlow and you can't with your Web framework
</h1><ol><li style="font-size: small;"><span style="white-space: pre-wrap;">Create test, integrate and install your logic <b>without concern for layout</b>. Edit your forms, widgets, style and content <b>at run time.  </b></span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Convert your application from an active, single page app to multiple pages and back with little code modifications.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make forms</span><span style="white-space: pre-wrap;"> that change the questions depending on your answers.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make a cascade menu with dynamic options programmatically, in a single procedure.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make an element of a page to refresh itself  independently by adding a single statement.</span><br></li><li><font size="2"><span style="white-space: pre-wrap;">Convert an element of a page to present its content in  push mode with a simple modifier.</span></font><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Press back as many times as you like by default and get what you expected.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Write a <b>multi-page flow </b> -for example, a shopping cart checkout- and seamlessly  <b>reuse </b>it whenever you need it.</span></li><li style="font-size: small;"><span style="white-space: pre-wrap;"><b>Write an active page element </b>with his own server code, JS, CSS <b>in a single procedure</b> and </span><span style="white-space: pre-wrap;"> seamlessly  <b>reuse </b>it whenever you need it.</span></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Write your routes and control logic as in a console application. <b>No spaguetti callback code.</b></span><br></li><li><font size="2"><span style="white-space: pre-wrap;">Transparently manage user session as normal program variables </span></font><b style="font-size: small; white-space: pre-wrap;">No </b><font size="2"><span style="white-space: pre-wrap;"><b>lockups</b>&nbsp;</span></font></li><li style="font-size: small;"><span style="white-space: pre-wrap;">transparently maintain the user session data for as long as you wish. even after shutdowns</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">Have automatic persistence for your data for rapid testing of your prototype.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make all of this without writing a single line of javaScript code. Although you can add it for your own needs.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make all of this in a type safe way: <b>If your app compiles, it works</b>.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make (almost) all of this work with or without javascript activated.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make all of this in an architecture that is horizontally scalable (although not implemented such scalabiltiy yet)</span></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Use MFlow as an <a href="https://www.fpcomplete.com/business/blog/guest-post-solve-integration-problem/" title="" target="">integration</a>, orchestration and Workflow platform for your company needs.</span></li></ol><p><span style="white-space: pre-wrap;"><font size="3"><b><i><br></i></b></font></span></p><p><span style="white-space: pre-wrap;"><font size="3"><b><i>More power and flexibility. Less plumbing. Less moving parts.</i></b>&nbsp;</font></span></p><div style="font-size: small;"><span style="white-space: pre-wrap;"><br></span></div><div><span style="white-space: pre-wrap;"><b><font size="3">You don't need to know Haskell before start learning MFlow.&nbsp;</font></b></span></div><div><span style="white-space: pre-wrap;"><b><font size="3"><br></font></b></span></div><div><span style="white-space: pre-wrap;"><font size="2">You will probably understand intuitively what this complete program does:</font></span></div><div><br></div><div><div><font face="courier new">&nbsp; import MFlow.Wai.Blaze.Html.All</font></div><div><font face="courier new"><br></font></div><div><font face="courier new">&nbsp; main= runNavigation "" . step $ do</font></div><div><font face="courier new">&nbsp; &nbsp; &nbsp; &nbsp;n &nbsp;&lt;- page $ getInt Nothing &lt;** submitButton "first"</font></div><div><font face="courier new">&nbsp; &nbsp; &nbsp; &nbsp;n' &lt;- page $ getInt Nothing &lt;** submitButton "second"</font></div><div><font face="courier new">&nbsp; &nbsp; &nbsp; &nbsp;page $ p &lt;&lt; ( n+n') ++&gt; wlink () &lt;&lt; b &lt;&lt; "One more time"</font></div></div><div><br></div><div><font size="3"><i><b>What you are waiting for?</b></i></font></div><div><br></div><div><a href="/noscript/wiki/howtoinstall" title="" target="">How to install MFlow</a></div><div><a href="https://www.fpcomplete.com/user/agocorona/MFlow-tutoria" title="" target="" style="font-size: small; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">Quick Start</a><span style="font-size: small; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp; &nbsp; : Basics for understanding and using MFlow</span></div><div style="font-size: small;"><a href="https://www.fpcomplete.com/user/agocorona/MFlowDSL" title="" target="">Quick Start 2</a> : How to modify an application to add dynamic effects: implicit ajax, push etc.</div><div style="font-size: small;"><br></div><p style="font-size: small; text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><br></p><font size="2" style="font-weight: normal;"><i><span style="white-space: pre-wrap;"><font face="helvetica">This release add </font><font face="courier new">witerate</font><font face="helvetica"> and </font><font face="courier new">dField</font><font face="helvetica">. They are modifiers that permit fast updates of placeholders within a page for single page applications. That is poweful specially in combination with runtime templates.  All of that with standard applicative and monadic combinators.  No javascript programming is necessary. All in composable, type safe haskell components (<a href="/noscript/wiki/singlepage.html" title="" target="">see this</a> for a detailed explanation).
</font></span></i></font><font face="helvetica" size="2" style="font-weight: normal;"><i><span style="white-space: pre-wrap;">
The <a href="https://github.com/agocorona/MFlow" title="" target="">release</a> (10/15/13) added <b>runtime templates</b>.  it </span></i><span style="background-color: rgb(255, 255, 255); color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px; text-align: justify;"><i>&nbsp;is possible modify the layout of the active components at run-time. This means that no longer is necessary to define a layout before compilation for a formulary, &nbsp;or for the arrangement of different widgets.&nbsp;</i></span></font><div style="font-weight: normal; color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255); text-align: justify;"><i><br></i></div><div style="font-weight: normal; color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255); text-align: justify;"><i>Just create them without layout, add static content after installation, when the application has been already tested. Then the layout never pollutes the code, and it may be decoupled also in time. <a href="http://localhost/noscript/templates/runtimetemplates" title="" target="">see this</a></i></div><div style="font-weight: normal; color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255); text-align: justify;"><i><br></i></div><div style="font-weight: normal; color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255); text-align: justify;"><i>See them in action in the&nbsp;<a href="http://mflowdemo.herokuapp.com/noscript/templates/runtimetemplates" title="" target="">runtime templates</a>&nbsp;example.</i></div><div style="font-weight: normal; color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255); text-align: justify;"><i><br></i></div><div style="font-weight: normal; color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255); text-align: justify;"><i>This demo now has also&nbsp;<b>cascade menus&nbsp;</b>&nbsp;(the main menu) implemented using&nbsp;<a href="http://haskell-web.blogspot.com.es/2013/06/the-promising-land-of-monadic-formlets.html" title="" target="">monadic widgets</a>. by simply combining applicative and monadic combinators. No Javascript is necessary.&nbsp;</i></div><div style="font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif; font-size: 10px; font-weight: normal; background-color: rgb(255, 255, 255); text-align: justify;"><br></div><div style="font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif; font-size: 10px; font-weight: normal; background-color: rgb(255, 255, 255); text-align: justify;"><font color="#222222"><span style="line-height: 18px;"><div><font face="Arial, Tahoma, Helvetica, FreeSans, sans-serif" style="font-size: small; font-style: italic;">&nbsp; &nbsp;</font><font face="courier new" size="2">autoRefresh $ ul &lt;&lt;&lt; do</font></div><div><font face="courier new" size="2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font><span style="font-family: 'courier new'; font-size: small;">li &lt;&lt;&lt; wlink OptionA &lt;&lt; "option A"</span></div></span></font><font color="#222222"><span style="line-height: 18px;"><div><font face="courier new" size="2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ul &lt;&lt;&lt; li &lt;&lt;&lt; (wlink OptionA1 &lt;&lt; "Option A1" &lt;! noAutoRefresh)</font></div><div><font face="courier new" size="2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;|&gt; li &lt;&lt;&lt; (wlink OptionA2 &lt;&lt; "Option A2" &lt;! noAutoRefresh)</font></div><div style="font-size: small;"><font face="courier new">&nbsp;</font></div></span></font></div><div style="font-weight: normal; background-color: rgb(255, 255, 255); text-align: justify; line-height: 18px; font-size: 13px; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; color: rgb(34, 34, 34);"><div style="color: rgb(0, 0, 0); font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif; font-size: 10px; line-height: normal;"><i><font color="#222222" face="Arial, Tahoma, Helvetica, FreeSans, sans-serif" size="2"><span style="line-height: 18px;">When the link "Option A" is clicked, the two sub-options appear. The link perform a roundtrip to the server so the options can be dinamically generated.</span></font></i></div></div><br style="font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif; font-size: 10px; font-weight: normal;"><b style="font-size: 10px; font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif; background-color: rgb(238, 238, 238);"><br></b><font size="2" style="font-weight: normal;"><div><i><span style="font-family: helvetica; white-space: pre-wrap;">The </span><a title="" href="https://github.com/agocorona/MFlow" target="" style="font-family: helvetica; white-space: pre-wrap;">release</a><font face="helvetica">&nbsp;(</font><span style="font-family: helvetica; text-align: justify; white-space: pre-wrap;">8/27/13)</span><span style="white-space: pre-wrap;"><font face="helvetica">, added a powerful and improved </font><b style="font-family: helvetica;">content management</b><font face="helvetica"> facility with </font><font face="courier new">tFieldEd</font></span></i></div><div style="font-family: helvetica;"><i><span style="white-space: pre-wrap;"><br></span></i></div><div style="font-family: helvetica;"><i><span style="white-space: pre-wrap;">MFlow content can be changed at runtime. All this document has been generated at run-time. I'm typing this over the application running. The programmer can specify for each content, which user can modify it. Now each content has a full text editor, it can upload images and can edit large chunks of text. See  the </span><span style="white-space: pre-wrap;"><a title="" href="http://mflowdemo.herokuapp.com/noscript/textedit" target="">content management</a> e</span><span style="white-space: pre-wrap;">xample.&nbsp;Runtime Templates extend this capability.</span></i></div><div style="font-family: helvetica;"><i><span style="white-space: pre-wrap;"><br></span></i></div><div style="font-family: helvetica;"><i><span style="white-space: pre-wrap;">This functionality uses <a href="http://nicedit.com/" title="" target="">NicEdit</a>.</span></i></div><div style="font-family: helvetica;"><i><span style="white-space: pre-wrap;"><br></span></i></div><div><span style="white-space: pre-wrap;"><i><font face="helvetica">This image show this same page in edition mode with three editors for the three </font><font face="courier new">tFieldEd of the page.</font></i></span></div><div><span style="white-space: pre-wrap;"><i><font face="courier new"><br></font></i></span></div><div><img src="/introeditor.png" alt="" align="none"><span style="white-space: pre-wrap;"><i><font face="courier new"><br></font></i></span></div><div style="font-family: helvetica;"><span style="white-space: pre-wrap;"><i><br></i></span></div><p dir="ltr" style="font-family: helvetica; text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;"><i><span style="vertical-align: baseline; white-space: pre-wrap;"></span></i></p><div><span style="white-space: pre-wrap;"><i><font face="helvetica">Additionally for text areas and input fields, there is a rich editor with programmer defined controls that is included automatically inf the input field is prefixed with </font><font face="courier new">htmlEdit</font><font face="helvetica">. The </font><a title="" href="http://mflowdemo.herokuapp.com/noscript/database" target="" style="font-family: helvetica;">database </a><font face="helvetica">example has a textarea with rich text edition.</font></i></span></div></font><font face="helvetica" size="2"><h1><span style="vertical-align: baseline; white-space: pre-wrap;">So what is MFlow?</span></h1><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">MFlow is simply the most high level, most advanced and fun to program web framework.&nbsp; MFlow uses Haskell magic to counteract the wicked magic of the inversion of control, where the web server call the application in unpredictable ways, and the programmer has to figure out what happens and reconstruct the context by hand. The Web programmer work is terrified by an explosion of events, configurations, plumbing, lookups and identifiers dispersed in different methods, files, formats and configurations. MFlow restore web programming to his intuitive and natural  way again by bringing the programmer a safe and predictable context with all his data and context available in a single piece of code where all that happens is in front of his eyes.</span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><br></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">Everything in MFlow that seems sophisticated is to solve a user problem, not a way to hide with fancy names the inherent<a href="http://haskell-web.blogspot.com.es/2013/04/the-event-handling-model-is-evil-for.html" title="" target=""> flawed nature </a>of the MVC model when used in real web applications.</span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;"><br></span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">MFlow Web applications are much like console applications. You just write an ordinary sequential program with inputs, outputs and control statements where the inputs and outputs are web pages. MFlow will run the sequence forward and backward depending on your input to find the appropriate location in the sequence to respond your query.&nbsp;</span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;"><br></span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">MFlow works in the same way people would read a cooking recipe: Each person look for instructions forward or backward until they find the correct point in the sequence appropriate for his state in the cooking process. To know his state, the people remember the name of the steps already done, but not the details of each step. That is exactly what MFlow does. All is pure tracking, backtracking and event logging. </span></p></font><span style="text-align: justify; line-height: 14px; font-family: helvetica; font-size: small; white-space: pre-wrap;">
Other frameworks try to do it with heavy page state or execution state snapshots That is too bad for scalability and this has limited the acceptance of this model for large scale web applications. </span><font face="helvetica" size="2"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;"><br></span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">Additionally MFlow has nice unique features for the creation of rich and dynamic applications: widgets can exhibit dinamic behaviours and refresh independently on their own without using explicit javaScript. The code for these dynamic widgets are, again much like console applications. With a few changes, a multi-page application can be converted into a dynamic auto-refreshed widget that can be inserted in a page along with others.</span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;"><br></span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">MFlow is the only Web Framework that uses matching of requests and true backtracking as the mechanism for browser-server synchronization. Each link or form in the page return type safe responses. The navigation is also type safe since it is encoded within a monadic procedure. The server process ever synchronize with the browser request. There are no sequence errors. The page is composed of reusable type-safe components called widgets that may change their rendering depending o the user responses by auto refreshing themselves &nbsp;without using JavaScript.</span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;"><br></span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">Since the navigation is coded as a normal procedure under the navigation monad, any navigation sequence can be reusable. Deployment and configuration is reduced to zero. The elements can work together if they type-check. In the examples you will see different ways to combine components: either widgets inside widgets, different widgets in a page or complete application flows called as normal procedures in a program.</span></p><div><span style="white-space: pre-wrap;"><br></span></div><h1><span style="vertical-align: baseline; white-space: pre-wrap;">Motivation:</span></h1><div><span style="white-space: pre-wrap;">MFlow was an application server designed for creating and execute complex workflows with a massive quantity of user and with high peaks in highly decentralized systems and with long time span. That is the environment of the votation system necessary for the <a title="" href="http://frictionfreedemocracy.org/software-libs" target="">Friction-free Democracy</a> project.&nbsp;This implies strong requirements for scalability, state persistence and verifiability.</span></div><div><span style="white-space: pre-wrap;"><br></span></div><div><span style="white-space: pre-wrap;">Note for advanced haskellers: With creating workflows I mean just that: A way to create a workflow by means of a succession of web pages with different options. each page depend on the previous data entered. See </span><a title="" style="white-space: pre-wrap;" href="http://haskell-web.blogspot.com.es/2012/09/a.html" target="">this post</a><span style="white-space: pre-wrap;"> to understand the requirement </span></div><div><span style="white-space: pre-wrap;"><br></span></div><div><span style="white-space: pre-wrap;">About the growing trend of client side frameworks,<a href="/noscript/wiki/aboutclientsideframeworks" title="" target=""> see this</a></span></div><div><span style="white-space: pre-wrap;"><br></span></div><div><span style="white-space: pre-wrap;">These requirements are quite general and apply to many modern applications. The architecture satisfy these requirement although some of them only theoretically at this moment, I was seduced by the elegance of the solution, so I tried to develop it as a complete web framework for general usage, with the following goals:</span><br></div><br><span style="vertical-align: baseline; white-space: pre-wrap;"></span><h1><span style="vertical-align: baseline; white-space: pre-wrap;">Goals:</span></h1><ul><li style="vertical-align: baseline; list-style-type: disc;" dir="ltr"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">To invert back the inversion of control of web applications and turn web programming into ordinary, intuitive, imperative-like, programming, as seen by the programmer.</span></p></li><li style="vertical-align: baseline; list-style-type: disc;" dir="ltr"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">At the same time, to maintain for the user all the freedom that he has in web applications. Back buttons and bookmarked URLs must work.</span></p></li><li style="vertical-align: baseline; list-style-type: disc;" dir="ltr"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">For scalability-sensitive applications, to avoid the fat state snapshots that continuation based frameworks need to cope with these two previous requirements. State replication and horizontal scalability must be possible.</span></p></li><li style="vertical-align: baseline; list-style-type: disc;" dir="ltr"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">For REST advocates, to maintain the elegant notation of REST URLs and the statelessness of GET requests.</span></p></li><li style="vertical-align: baseline; list-style-type: disc;" dir="ltr"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">For expert haskell programmers, to reuse the already existent web libraries and techniques.</span></p></li><li style="vertical-align: baseline; list-style-type: disc;" dir="ltr"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">For beginner programmers and for Software Engineers, to provide with a high level DSL of reusable, self contained widgets for the user interface, and multipage procedures that can work together provided that they statically typecheck, with zero configuration.</span></p></li><li><span style="white-space: pre-wrap; line-height: 1.15; text-align: justify;">For highly interactive applications, to give dynamic widgets that have their own dynamic behaviors in the page, and communicate with the server with ajax, without  the need of explicit JavaScript programming.</span><br></li><li><span style="white-space: pre-wrap; line-height: 1.15;">Separation of layout and programming when necessary. HTML layout and content modifiable in editor mode and design mode at runtime.</span><br></li><li><span style="white-space: pre-wrap; line-height: 1.15;">To do all with a single paradigm and composable elements, with  no ad-hoc constructions for each functionality. A component can be used in different contexts: either multipage or single page applications, with or without AJAX.</span><br></li></ul></font><p dir="ltr" style="font-family: helvetica; font-size: small; text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;"></p><font face="helvetica" size="2"><span style="vertical-align: baseline; white-space: pre-wrap;"></span><h1><span style="color: rgb(102, 102, 102); vertical-align: baseline; white-space: pre-wrap;">How it works:</span></h1><span style="vertical-align: baseline; white-space: pre-wrap;"></span><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">MFlow solves the first goals using an innovative approach. The routes are expressed as normal, monadic haskell code in the navigation monad. Local links point to alternative routes within this monadic computation just like a textual menu in a console application with print and read can redirect to one or other code depending on the user input. But unlike in the case of a console application the user ever has te option of press the back button and go back go to the menu back again. Any GET page is directly reachable by means of an URL.</span></p><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">At any moment the flow can respond to the back button or to any RESTful path that the user may paste in the navigation bar. If the procedure is waiting for another different page, the navigation monad backtrack until the path partially match. From this position on, the execution goes forward until the rest of the path match. Thus, no matter the previous state of the server process, it recover the state of execution appropriate for the request. This way the server process is virtually stateless for any GET request. However, it is possible to store a session state, which may backtrack or not when the navigation goes back and forth. It is up to the programmer to decide. </span></p><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">When the state matters, and user interactions can last for long, such are shopping carts, it uses a log for thread state persistence. The server process shut itself down after a programmer defined timeout. Once a new request of the same user arrive, the log is used to recover the process state. There is no need to store a snapshot of every continuation, just the result of each step. As a result, the overhead of state synchronization with persistent storage and among machines is light. The memory footprint is also low since the timeout-recovery mechnism clear the idle processes from memory.</span></p><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><h2><span style="color: rgb(102, 102, 102); vertical-align: baseline; white-space: pre-wrap;">Data tier:</span></h2><div style="text-align: justify;"><span style="line-height: 1.15; vertical-align: baseline; white-space: pre-wrap;">State consistence and transactions are given by the </span><a href="http://hackage.haskell.org/package/TCache" style="line-height: 1.15; text-decoration: none;"><span style="color: rgb(17, 85, 204); text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">TCache </span></a><span style="line-height: 1.15; vertical-align: baseline; white-space: pre-wrap;">package.</span><br></div><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">It is data cache within the STM monad (Software Transactional Memory). Serialization and deserialization of data is programmer defined, so it can adapt it to any database, although any other database interface can be used. Default persistence in files comes out of the box for rapid development purposes.</span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;"><br></span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">MFlow has bindings also for Amazon Web Services and  <a href="http://www.yesodweb.com/book/persistent" title="" target="">Persistent</a>.  This latter is  backend-independent, developed for the <a href="http://www.yesodweb.com/" title="" target="">Yesod </a>web Framework.&nbsp;</span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;"><br></span></p><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">Persistent allow MFlow to ease the connection to different SQL databases and other NoSQL databases such is MongoDB.</span></p><div style="text-align: justify;"><br></div><div style="text-align: justify;">Demos:</div><div style="text-align: justify;"><ul style="font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif; font-size: 10px; text-align: left; background-color: rgb(238, 238, 238);"><li><a href="http://localhost/noscript/databasesamples/mflowpersist"><b>Persistent</b></a><b>&nbsp;illustrates the use of MFlow with&nbsp;</b><a href="http://www.yesodweb.com/book/persistent">Persistent</a>&nbsp;(In this example sqlite backend is used)&nbsp;<a href="http://haskell-web.blogspot.com.es/2013/08/mflow-using-persistent-with-sqlite.html"><i>(article)</i></a></li><li><a href="http://localhost/noscript/databasesamples/database"><b>Database</b></a><b>&nbsp;Create, Store and retrieve lines of text from Amazon SimpleDB storage&nbsp;</b><a href="http://haskell-web.blogspot.com.es/2013/08/using-amazon-web-services-with-tcache.html"><i>(article)</i></a></li></ul></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><h2><span style="color: rgb(102, 102, 102); vertical-align: baseline; white-space: pre-wrap;"><br></span></h2><h2><span style="color: rgb(102, 102, 102); vertical-align: baseline; white-space: pre-wrap;">Widgets:</span></h2><div style="text-align: justify;"><span style="white-space: pre-wrap; line-height: 1.15;">The processes interact through widgets, that are an extension of formlets with additional applicative combinators , formatting, link management, callbacks, modifiers, caching and AJAX. All is coded in pure haskell. Each widget return statically typed data. They can dynamically modify themselves using AJAX internally (Just prefix it with autorefresh). They are auto-contained: they may include their own JavaScript code, server code and client code in a single pure Haskell procedure that can be combined with other widgets with no other external configuration needed.</span><br></div><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">To combine widgets, applicative combinators are used. Widgets with dynamic behaviours can use the monadic syntax and callbacks.</span></p><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><h2><span style="color: rgb(102, 102, 102); vertical-align: baseline; white-space: pre-wrap;">Modularity:</span></h2><div style="text-align: justify;"><span style="white-space: pre-wrap; line-height: 1.15;">The interfaces and communications are abstract, but there are bindings for blaze-html, HSP, Text.XHtml and byteString, Hack and WAI but it can be extended to non Web based architectures.</span><br></div><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="vertical-align: baseline; white-space: pre-wrap;">It is designed for applications that can be run with no deployment within runghc in order to speed up the development process. see </span><a style="text-decoration: none;" href="http://haskell-web.blogspot.com.es/2013/05/a-web-application-in-tweet.html"><span style="color: rgb(17, 85, 204); text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">this</span></a><span style="vertical-align: baseline; white-space: pre-wrap;">.</span></p><div style="text-align: justify;"><br></div><span style="vertical-align: baseline; white-space: pre-wrap;"></span><h1><span style="color: rgb(102, 102, 102); vertical-align: baseline; white-space: pre-wrap;">Features:</span></h1><h3>Widgets &amp; page utilities:</h3><div style="text-align: justify;"><ul style="text-align: start; margin-top: 0pt; margin-bottom: 0pt;"><li dir="ltr" style="vertical-align: baseline; list-style-type: disc;"><p dir="ltr" style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;"><span style="vertical-align: baseline; white-space: pre-wrap;">Widget requirements for automatic installation of scripts, CSS and server flows.</span></p></li><li><span style="white-space: pre-wrap; text-align: justify;">Cached widgets</span></li><li><a href="http://haskell-web.blogspot.com.es/2013/07/maxwell-smart-push-counter.html" style="line-height: 1.15; text-align: justify; white-space: pre-wrap; text-decoration: none;">Push widget</a><span style="line-height: 1.15; text-align: justify; text-decoration: underline; white-space: pre-wrap;">s</span></li><li><a href="http://haskell-web.blogspot.com.es/2013/06/and-finally-widget-auto-refreshing.html" style="line-height: 1.15; white-space: pre-wrap; text-align: justify; text-decoration: none;">Automatic, independent refreshing of widgets via Ajax</a></li><li><span style="line-height: 1.15; text-align: justify;">Runtime templates: widget layout editable at run-time</span></li><li><span style="line-height: 1.15; text-align: justify;">Placeholders in templates</span></li><li><span style="font-size: 13px; line-height: 1.15; text-align: justify; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif; vertical-align: baseline; white-space: pre-wrap;">Besides applicative syntax (declarative-like) each widget can use the monadic syntax (imperative-like) so widgets can express </span><a href="http://haskell-web.blogspot.com.es/2013/06/the-promising-land-of-monadic-formlets.html" style="font-size: 13px; line-height: 1.15; text-align: justify; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif; text-decoration: none;"><span style="color: rgb(17, 85, 204); text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">their own behaviour and can run its own independent page flow</span></a><span style="font-size: 13px; line-height: 1.15; text-align: justify; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif; vertical-align: baseline; white-space: pre-wrap;">.&nbsp;</span></li><li><a href="http://haskell-web.blogspot.com.es/2013/06/callbacks-in-mflow.html" style="line-height: 1.15; text-align: justify; text-decoration: none;"><span style="color: rgb(17, 85, 204); text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Widget callbacks</span></a><span style="line-height: 1.15; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">, used in page flows, that change the rendering of the widget</span></li><li><span style="line-height: 1.15; white-space: pre-wrap; text-align: justify;">Widgets in modal and non modal dialogs (using jQuery dialog)</span></li><li><span style="line-height: 1.15; white-space: pre-wrap; text-align: justify;">Other jQuery widgets as MFlow widgets</span></li><li><span style="line-height: 1.15; white-space: pre-wrap; text-align: justify;">Ajax</span></li><li><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif; line-height: 1.15; white-space: pre-wrap; text-align: justify; font-size: 13px;">Content management and internationalization</span></li></ul></div></font><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><span><p dir="ltr" style="text-align: justify; margin-top: 0pt; margin-bottom: 0pt;"><font face="rebuchet MS, Helvetica, Arial, Verdana, sans-serif"><span style="line-height: 14px; white-space: pre-wrap;"><br></span></font></p></span></blockquote><span><h3><font face="helvetica" size="2"><span style="line-height: 14px;">Multipage apps:</span></font></h3><font face="helvetica" size="2"><ul style="margin-top: 0pt; margin-bottom: 0pt;"><li style="vertical-align: baseline; list-style-type: disc;" dir="ltr"><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="white-space: pre-wrap; line-height: 1.15;">Widget actions that initiate a new page navigation when a widget is validated</span></p></li><li><p dir="ltr" style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;"><span style="white-space: pre-wrap; line-height: 1.15;">Transparent back button management</span><br></p></li><p style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="white-space: pre-wrap; line-height: 1.15;"></span></p><li><span style="line-height: 1.15; white-space: pre-wrap; text-align: justify;">User-defined data in sessions</span></li><li><span style="line-height: 1.15; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">Full </span><a href="http://haskell-web.blogspot.com.es/2013/07/the-web-navigation-monad.html" style="line-height: 1.15; text-align: justify; text-decoration: none;"><span style="color: rgb(17, 85, 204); text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">REST</span></a><span style="line-height: 1.15; text-align: justify; vertical-align: baseline; white-space: pre-wrap;"> compliance</span></li><li dir="ltr" style="vertical-align: baseline; list-style-type: disc;"><p dir="ltr" style="text-align: justify; line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;"><a href="http://haskell-web.blogspot.com.es/2013/07/automatic-error-trace-generation-in.html" style="line-height: 1.15; text-decoration: none;"><span style="color: rgb(17, 85, 204); text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Complete execution traces for errors</span></a></p></li></ul></font></span><span><div style="text-align: justify;"><font face="helvetica" size="2"><span style="line-height: 14px; white-space: pre-wrap;"><br></span></font></div><font face="helvetica" size="2"><div style="text-align: justify;"><br></div><h1><span style="color: rgb(102, 102, 102); white-space: pre-wrap;">Links:</span></h1><div><p style="text-align: justify;"><a href="http://localhost/html/MFlow/index.html">MFlow package description and documentation</a></p><p style="text-align: justify;"><a href="https://github.com/agocorona/MFlow/blob/master/Demos">see demos source code</a></p><p style="text-align: justify;"><a href="https://github.com/agocorona/MFlow/issues">bug tracker</a></p><p style="text-align: justify;"><a href="https://github.com/agocorona/MFlow">source repository</a></p><p style="text-align: justify;"><a href="http://hackage.haskell.org/package/MFlow">Hackage repository</a></p></div></font></span>