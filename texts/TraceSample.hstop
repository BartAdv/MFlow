TField "TraceSample.hstop" (Chunk "<h3 class=\"post-title entry-title\" itemprop=\"name\" style=\"text-align: justify; margin: 0.75em 0px 0px; position: relative; font-weight: normal; font-size: 22px; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; color: rgb(34, 34, 34); background-color: rgb(255, 255, 255);\">Automatic error trace generation in MFlow</h3><div class=\"post-header\" style=\"line-height: 1.6; margin: 0px 0px 1.5em; font-size: 11px; color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; background-color: rgb(255, 255, 255);\"><div class=\"post-header-line-1\"></div></div><div class=\"post-body entry-content\" id=\"post-body-7994414240739235079\" itemprop=\"description articleBody\" style=\"width: 730px; position: relative; background-color: rgb(255, 255, 255);\"><div style=\"color: rgb(34, 34, 34); font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 1.4; text-align: justify;\"><span style=\"line-height: 1.4;\">To have&nbsp; the trace of an unexpected error is very important in Web development. Specially when the error&nbsp;has&nbsp;been produced&nbsp;in the exploitation environment. There is no way to make tests in a exploitation environment, so the error message is the only information available to fix it as soon as possible.</span><span style=\"line-height: 1.4;\">&nbsp;</span></div><div style=\"text-align: justify;\"><font color=\"#222222\" face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\" size=\"2\"><span style=\"line-height: 18px;\"><br></span></font></div><font color=\"#222222\" face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\" size=\"2\"><div style=\"text-align: justify;\"><font color=\"#222222\" face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\" size=\"2\"><span style=\"line-height: 1.4;\">Now MFlow permits the creation of execution traces. Not just call traces, but execution traces, whenever an error happens. It uses the package&nbsp;</span></font><a href=\"http://hackage.haskell.org/package/monadloc\" style=\"color: rgb(136, 136, 136); font-size: 13px; line-height: 1.4; text-decoration: none;\">monadloc</a><font color=\"#222222\" face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\" size=\"2\"><span style=\"line-height: 1.4;\">&nbsp;from Pepe Iborra, used to produce stack traces in his package&nbsp;</span></font><a href=\"http://hackage.haskell.org/package/control-monad-exception\" style=\"color: rgb(136, 136, 136); font-size: 13px; line-height: 1.4; text-decoration: none;\">control-monad-exception</a><font color=\"#222222\" face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\" size=\"2\"><span style=\"line-height: 1.4;\">. &nbsp;</span></font></div></font><div style=\"text-align: justify;\"><br></div><font color=\"#222222\" face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\" size=\"2\"><div style=\"text-align: justify;\"><span style=\"line-height: 1.4;\">Using MonadLoc, MFlow can produce entire traces instead of call stacks because his backtracking mechanism permits to&nbsp;&nbsp;run back the execution up to the beginning in case of an exception following the exact execution steps in reverse order. In this back-execution is when the trace is generated. When running normally, the tracing machinery does not affect the performance.</span></div></font><div style=\"text-align: justify;\"><br></div><font color=\"#222222\" size=\"2\"><div style=\"text-align: justify;\"><span style=\"line-height: 1.4;\"><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\">This is an example of what it is necessary in order to have execution traces in case of error.&nbsp; It is necessary to install the monadloc-pp and monadloc packages that install the </font><font face=\"courier new\">monadloc </font><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\">preprocessor and the </font><font face=\"courier new\">monadloc </font><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\">class respectively. There&nbsp;are two according changes in the user programs, the preprocessor directive and to include&nbsp; the </font><font face=\"courier new\">Control.Monad.Loc</font><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\"> " (Chunk "module.</font></span></div><div style=\"font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; text-align: justify;\"><span style=\"line-height: 1.4;\"><br></span></div><div style=\"text-align: justify;\"><span style=\"line-height: 18px;\"><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\">EDIT: &nbsp;The persistent flows have no </font><font face=\"courier new\">MonadLoc </font><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\">instance, but since the persistent flows have forward logs, it is possible to trace the execution. Once an error is produced in a persistent flow, its log is moved to the error subdirectory within the .</font><font face=\"courier new\">tcachedata </font><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\">folder. &nbsp;Since a flow can have persistent and non persistent sections (depending where they use the </font><font face=\"courier new\">step </font><font face=\"Arial, Tahoma, Helvetica, FreeSans, sans-serif\">statement) &nbsp;In the future, both logging mechanisms will be integrated in the same error message.</font></span></div></font></div>" Empty))